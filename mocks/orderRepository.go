// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/igortoigildin/go-rewards-app/internal/service/domain/order (interfaces: OrderRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	order "github.com/igortoigildin/go-rewards-app/internal/entities/order"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// InsertOrder mocks base method.
func (m *MockOrderRepository) InsertOrder(arg0 context.Context, arg1 *order.Order) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockOrderRepositoryMockRecorder) InsertOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockOrderRepository)(nil).InsertOrder), arg0, arg1)
}

// SelectAllByUser mocks base method.
func (m *MockOrderRepository) SelectAllByUser(arg0 context.Context, arg1 int64) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllByUser", arg0, arg1)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllByUser indicates an expected call of SelectAllByUser.
func (mr *MockOrderRepositoryMockRecorder) SelectAllByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllByUser", reflect.TypeOf((*MockOrderRepository)(nil).SelectAllByUser), arg0, arg1)
}

// SelectForAccrualCalc mocks base method.
func (m *MockOrderRepository) SelectForAccrualCalc() ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectForAccrualCalc")
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectForAccrualCalc indicates an expected call of SelectForAccrualCalc.
func (mr *MockOrderRepositoryMockRecorder) SelectForAccrualCalc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectForAccrualCalc", reflect.TypeOf((*MockOrderRepository)(nil).SelectForAccrualCalc))
}

// UpdateOrderAndBalance mocks base method.
func (m *MockOrderRepository) UpdateOrderAndBalance(arg0 context.Context, arg1 *order.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderAndBalance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderAndBalance indicates an expected call of UpdateOrderAndBalance.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrderAndBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderAndBalance", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrderAndBalance), arg0, arg1)
}
