// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/igortoigildin/go-rewards-app/internal/api (interfaces: OrderService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/igortoigildin/go-rewards-app/config"
	order "github.com/igortoigildin/go-rewards-app/internal/entities/order"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// InsertOrder mocks base method.
func (m *MockOrderService) InsertOrder(arg0 context.Context, arg1 string, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockOrderServiceMockRecorder) InsertOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockOrderService)(nil).InsertOrder), arg0, arg1, arg2)
}

// SelectAllByUser mocks base method.
func (m *MockOrderService) SelectAllByUser(arg0 context.Context, arg1 int64) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllByUser", arg0, arg1)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllByUser indicates an expected call of SelectAllByUser.
func (mr *MockOrderServiceMockRecorder) SelectAllByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllByUser", reflect.TypeOf((*MockOrderService)(nil).SelectAllByUser), arg0, arg1)
}

// UpdateAccruals mocks base method.
func (m *MockOrderService) UpdateAccruals(arg0 *config.Config, arg1 *order.Order) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateAccruals", arg0, arg1)
}

// UpdateAccruals indicates an expected call of UpdateAccruals.
func (mr *MockOrderServiceMockRecorder) UpdateAccruals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccruals", reflect.TypeOf((*MockOrderService)(nil).UpdateAccruals), arg0, arg1)
}
